<!--
    Ant build file for sample project.
	For a list of build tasks enter:  ant -p
 -->
<project name="demo-ci" default="test" basedir=".">
	<description> Demo project for testing with CI. </description>

	<!-- location of src and output (build) directories. -->
	<!-- the build directory will be deleted and recreated -->
	<property name="base.dir" location="." />
	<property name="src.dir" location="${base.dir}/src"/>
	<property name="build.dir" location="${base.dir}/bin"/>
	<property name="dist.dir" location="${base.dir}"/>
	<property name="test.src.dir" location="${base.dir}/test" />
	<property name="test.build.dir" location="${base.dir}/bin/test" />
	<!-- lib.dir contains JUnit libraries -->
	<property name="lib.dir" value="/opt/junit" /> <!-- Jim's computer only -->

	<path id="test.classpath">
		<!-- include all Jars in the lib directory (for JUnit) -->
		<fileset dir="${lib.dir}" includes="*.jar" />
		<!-- always need the build directory on the classpath -->
		<pathelement location="${build.dir}" />
	</path>

	<!-- The "deps" target is used on Travis CI to install dependencies. -->
	<target name="deps"
            description="Install JUnit jars. Needed for Travis-CI." >
		<!-- Install JUnit from Maven central -->
		<!-- Two different style URLs to download stuff from Maven Central -->
		<mkdir dir="${lib.dir}" />
        <!-- http://central.maven.org/maven2/junit/junit/4.12/junit-4.12.jar -->
		<get dest="${lib.dir}/junit-4.12.jar" 
             src="http://search.maven.org/remotecontent?filepath=junit/junit/4.12/junit-4.12.jar"
             skipexisting="true" 
             verbose="true" />
		<get dest="${lib.dir}/hamcrest-core-1.3.jar" 
             src="http://central.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"
             skipexisting="true" 
             verbose="true" />
	</target>

	<target name="clean" description="Delete build products and build directory">
	   <delete dir="${build.dir}" />
	</target>

	<!-- create the build directory for output -->
	<target name="init" description="Create output directories if they don't exist" >
	   <mkdir dir="${build.dir}" />
	   <mkdir dir="${test.build.dir}" />
	</target>

	<!-- compile the source code -->
	<target name="compile" depends="init" description="Compile source code" >
		<javac srcdir="${src.dir}" destdir="${build.dir}" includeantruntime="false" />
	</target>

	<!-- compile the test code -->
	<target name="test-compile" depends="init,compile"
		    description="Compile source code for test cases" >
		<javac srcdir="${test.src.dir}" destdir="${test.build.dir}" includeantruntime="false" >
			<classpath refid="test.classpath" />
		</javac>
	</target>

	<!-- Test the code using JUnit. -->
	<target name="test" depends="test-compile" description="Run unit tests" >
		<junit fork="true" printsummary="on" haltonfailure="false">
			<classpath>
				<path refid="test.classpath" />
				<pathelement location="${test.build.dir}" />
			</classpath>
			<!-- What classes contain JUnit tests? -->
			<batchtest>
				<fileset dir="${test.build.dir}" includes="**/*Test.class" />
			</batchtest>
		</junit>
	</target>

    <!-- create a JAR file -->
    <target name="dist" depends="compile" 
                       description="Create JAR file of main code" >
        <jar destfile="${dist.dir}/demo-ci.jar" 
             basedir="${build.dir}" 
             excludes="test,test/*" >
            <!-- For a runnable Jar file, manifest must have a Main-Class -->
            <manifest>
                <attribute name="Main-Class" value="ArrayMath"/>
            </manifest>
        </jar>
    </target>

</project>
