<!--
    Ant build file for sample project.
	For a list of build tasks enter:  ant -p build.xml
 -->
<project name="demo-ci" default="test" basedir=".">
	<description> Compile and test project code. </description>

	<!-- location of src and output (build) directory -->
	<!-- the output directory will be deleted and created -->
	<property name="base.dir" location="." />
	<property name="src.dir" location="src"/>
	<property name="build.dir" location="bin"/>
	<!-- lib.dir contains JUnit libraries -->
	<property name="lib.dir" value="./lib" /> <!-- Jim's computer only -->
	<property name="test.src.dir" location="${base.dir}/test" />
	<property name="test.build.dir" location="${base.dir}/bin/test" />

	<!-- test if JUnit is already installed -->
	<!-- a more robust test would be classname="org.junit.runner.Runner"
		 but that only works if classpath is pre-configured to include JUnit.
	 -->
	<available file="${lib.dir}/junit-4.12.jar" property="junit.installed"/>

	<path id="test.classpath">
		<!-- include all Jars in the lib directory (for JUnit) -->
		<fileset dir="${lib.dir}" includes="*.jar" />
		<!-- always need build.dir on the path -->
		<pathelement location="${build.dir}" />
	</path>

	<!-- The "deps" target is used on Travis CI to install dependencies. -->
	<target name="deps" unless="junit.installed" >
		<!-- install JUnit from Maven central -->
		<mkdir dir="${lib.dir}" />
        <!-- http://central.maven.org/maven2/junit/junit/4.12/junit-4.12.jar -->
		<get dest="${lib.dir}/junit-4.12.jar" 
             src="http://search.maven.org/remotecontent?filepath=junit/junit/4.12/junit-4.12.jar"
             skipexisting="true" 
             verbose="true" />
		<get dest="${lib.dir}/hamcrest-core-1.3.jar" 
             src="http://central.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"
             skipexisting="true" 
             verbose="true" />
	</target>

	<target name="clean"
		    description="Clean build products and delete build dir">
	   <delete dir="${build.dir}" />
	</target>

	<!-- create the build directory for output -->
	<target name="init" description="Create output dirs if they don't exist" >
	   <mkdir dir="${build.dir}" />
	   <mkdir dir="${test.build.dir}" />
	</target>

	<!-- compile the source code -->
	<target name="compile" depends="init" description="Compile source code" >
		<javac srcdir="${src.dir}" destdir="${build.dir}" includeantruntime="false" />
	</target>

	<!-- compile the test code -->
	<target name="test-compile" depends="init,compile"
		    description="Compile source code for test cases" >
		<javac srcdir="${test.src.dir}" destdir="${test.build.dir}" includeantruntime="false" >
			<classpath refid="test.classpath" />
		</javac>
	</target>


	<!-- Test the code using JUnit. -->
	<target name="test" depends="test-compile" description="Run unit tests" >
		<junit fork="true" printsummary="on" haltonfailure="false">
			<classpath>
				<path refid="test.classpath" />
				<pathelement location="${test.build.dir}" />
			</classpath>
			<batchtest>
				<fileset dir="${test.src.dir}" includes="**/*Test.java" />
			</batchtest>
		</junit>
	</target>

</project>
